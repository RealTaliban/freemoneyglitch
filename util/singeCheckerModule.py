from selenium.webdriver.chrome.options import Options
from selenium import webdriver
from colorama import Fore
import main
import time
import os


r = Fore.RED
g = Fore.GREEN
b = Fore.BLUE
c = Fore.CYAN
m = Fore.LIGHTMAGENTA_EX
y = Fore.LIGHTYELLOW_EX
w = Fore.WHITE


def log(username, password, valid):
    if valid == True:
        print(f"\n[{g}Username{w}] {y}{username}{w} \n[{b}Password{w}] {y}{password}{w} \n[{m}Account-Valid{w}] {g}Valid{w}\n")

        with open("./logins.txt", "a") as f:
            f.write(f"[Info] {username}:{password}\n")

    elif valid == False:
        print(f"\n[{g}Username{w}] {y}{username}{w} \n[{b}Password{w}] {y}{password}{w} \n[{m}Account-Valid{w}] {r}Invalid{w}\n")

    elif valid == None:
        print(f"\n[{r}Username Unavalable or Inapropreat{w}]")

    else:
        pass


def captcha(bot):
    try:
        time.sleep(2)
        bot.find_element_by_xpath('//*[@id="home_children_button"]')
        print(f"{w}[{c}i{w}] Captcha needs to be filled out")
        time.sleep(5)
        captcha()
    except:
        pass


def findUser(bot):
    try:
        bot.find_element_by_xpath('//*[@id="fc-iframe-wrap"]')
        pass
    except:
        time.sleep(1)
        findUser(bot)


def checker(bot, username: str, password: str):
    bot.get("https://roblox.com/login")
    try:
        bot.find_element_by_xpath('//*[@id="header"]/div/ul[1]/li[2]/a')
    except:
        try:
            bot.find_element_by_xpath('//*[@id="login-username"]')
        except:
            checker(bot, username, password)
        checker(bot, username, password)

    try:
        usernameInput = bot.find_element_by_xpath('//*[@id="login-username"]')
        passwordInput = bot.find_element_by_xpath('//*[@id="login-password"]')
        login = bot.find_element_by_xpath('//button[@id="login-button"]')
        try:
            accept = bot.find_element_by_xpath(
                '//*[@id="cookie-banner-wrapper"]/div[1]/div[2]/div/div/button[2]')
        except:
            print("Accept element cant be located")

        try:
            captcha(bot)
        except:
            pass

        # Username
        usernameInput.clear()
        usernameInput.send_keys(username)

        # Password
        passwordInput.clear()
        passwordInput.send_keys(password)

        # Login
        time.sleep(1)
        accept.click()
        time.sleep(1)
        bot.execute_script("arguments[0].click();", login)
        time.sleep(2)
        captcha(bot)
        time.sleep(1)
        findUser(bot)

        try:
            if str(bot.find_element_by_xpath('//p[@class="form-control-label xsmall text-error login-error ng-binding"]')) != "":
                log(username, password, False)
                bot.close()
            else:
                log(username, password, True)
                bot.close()
        except:
            log(username, password, True)
            bot.close()

    except:
        log(username, password, True)
        bot.close()


def mainChecker(headless: bool = True):
    options = Options()
    options.headless = headless
    options.add_experimental_option(
        "excludeSwitches", ["enable-logging"])

    fp = input(
        f"{w}[{m}>{w}] Filepath to logins (format: username:password) [f = file generated by the gen]: ")
    try:
        if fp.lower() == "f":
            path = os.getcwd()
            if path.__contains__("Gen\\"):
                sPath = path.split("\\")
                for i in range(len(sPath)):
                    if sPath[i].__contains__("Gen"):
                        pathIndex = i

                path = ""
                for i in range(pathIndex):
                    path = path + "".join(sPath[i])
                    path = str(path) + "/"
            fp = f"{path}/logins.txt"

        with open(fp, "r") as f:
            loginList = f.readlines()
            if len(loginList) > 0:
                for i in range(len(loginList)):
                    info = loginList[i]

                    if info.__contains__("[Info] "):
                        info = info.replace("[Info] ", "")

                    info = info.replace("\n", "")
                    data = info.split(":")
                    if len(data) > 0:
                        username = data[0]
                        password = data[1]

                    bot = webdriver.Chrome(chrome_options=options)
                    try:
                        checker(bot, username, password)
                    except:
                        bot.close()
    except:
        print(f"{w}[{r}!{w}] Invalid file path, press [ENTER] to return")
        input()
        main.mainMenu()
